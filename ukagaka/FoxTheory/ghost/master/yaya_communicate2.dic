


OpenTextfile{
  //テキストファイルから汎用配列を作る処理
  //引数は_argv[0]が読み込むファイル(相対パス)
  //_argv[1]が格納する配列にしたかったが...引数の名前の配列って作れるの
  FCHARSET("Shift-JIS")//単語ファイルはUTF-8でつくるべきかな...
  _flag = FOPEN(_argv[0], "r")
  _A = IARRAY//空の配列の作成
  while 1 {
    _word = FREAD(_argv[0])
    if (_word == -1){
      break
    }
    _A = (_A, _word)
  }
  FCLOSE(_argv[0])
  _A[2]
}
//これをさらにグローバル配列にする意味はある...?
//必要な時に呼び出したほうがよさげだけど、とりあえずやってみるか
/*
OpenTest{
  //テキストファイルから汎用配列を作る処理
  FCHARSET("Shift-JIS")//単語ファイルはUTF-8でつくるべきかな...
  _flag = FOPEN("words\physics_hard.txt", "r")
  _A = IARRAY//空の配列の作成
  while 1 {
    _word = FREAD("words\physics_hard.txt")
    if (_word == -1){
      break
    }
    _A = (_A,_word)
  }
  FCLOSE("words\physics_hard.txt")
  _A[2]
}
*/
//以下は形態素解析を実装する前の旧式モジュール。
//消すのもちょっともったいないので、新しいやつと併用して使うことにする
Conversation_old:nonoverlap{
	//配列による判定
  commumath_hard ="ヤング図,D-brane,アイゼンシュタイン級数,楕円関数,シュティーフェル多様体,汎関数積分,複素多様体,ガロア理論,ポアンカレ予想,フェルマーの最終定理,リーマン予想,フルヴィッツゼータ,選択公理,ゼータ"
	commumath_easy = "微分,積分,方程式,線形,写像,足し算,割り算,暗算,テイラー展開,ローラン展開,ワイエルシュトラス,群,準同型写像,同型写像,ルベーグ積分,リー微分,多様体,余接空間,コンパクト,共形変換,楕円関数,ツォルンの補題,オイラーの定理,多様体,リー代数,積分測度,同相,ルジャンドル変換,ホモトピー,ホモロジー,トポロジー,パラコンパクト,微分形式,トポロジー,関数,次元,開集合,開被覆,ベクトル,テンソル,スカラー,基底,座標"
	commuphysics_hard = "SU(5)GUT,Yang-Mills理論,エルゴード仮説,修正重力,カシミール効果,Casimir効果,ストリング,String,string,ハドロン,ニュートリノ,ヒッグス,AdS/CFT,CFT,QFT,Higgs doublet model,Einstein方程式,String,くりこみ,繰り込み,正則化,余剰次元,超電導,超流動,マイスナー効果,クリストッフェル,アインシュタイン方程式,ガモフ因子,超弦,イジング模型,ハイゼンベルグ模型"
	commuphysics_easy = "バーテックス,量子,解析力学,分配関数,作用,プラズマ,電子,ミューオン,電流,波動関数,古典力学,マクスウェル,Maxwell,散乱,断面積,重力,電磁気,核力,粘性,流体,スピノル,湯川,ポテンシャル,スピンカレント,ポアンカレ不変性,有効作用,Effective Action,対称性,クォーク,レプトン,ゲージ,フェルミオン,ボソン,ヒッグス,Higgs,アインシュタイン,Einstein,ディラック,Dirac,ベルヌーイ,ファインマン,Feynman,ダイアグラム,シュレーディンガー,Schroedinger"
	commufood = "うなぎ,蒲焼,ごはん,ご飯,お米,ラーメン,パン,らーめん,うどん,そば,サラダ,おにぎり,カレー,ハンバーガー,パスタ,ピザ,カップ麺,ペスカトーレ,焼肉,,焼き肉,やきにく,焼き鳥,やきとり,ごはん,丼,カロリーメイト,ハンバーグ,ステーキ,オムライス,餅,チャーハン"
	commusweets = "ドライアプリコット,柘榴,シフォンケーキ,チーズケーキ,チョコレート,チョコ,シロノワール,シュークリーム,ヨーグルト,大福,ショートケーキ,モンブラン,ザッハトルテ,フロマージュ,キャラメル,マシュマロ,クッキー,リンゴ飴,ケーキ,スコーン,りんご,ざくろ,杏子,みかん,"
	commulike = "好き,愛してる,愛しています,かわいい,可愛い,"
	commusexual = "セックス,せっくす,性交,sex,Sex,おっぱい,胸を,胸揉,まんこ,マンコ,性器,抱き,パイズリ,フェラ,イラマ,アナル,股を,アソコ,ペニス,エッチ,ヘンタイ,オナニー,自慰,円光,援交,ラブホ,エロい"
	commutired = "疲れた,つかれた,眠い,ねむい"
	commuOK = "いいよ,良いよ,OK,もちろん,勿論,了解,りょうかい,yes,Yes,Yeah,いえす"

	commuwords = (commuphysics_hard,commumath_hard,commuphysics_easy,commumath_easy,commufood,commusweets,commusexual,commulike,commutired,commuOK)

	_A1 = 0
	_A2 = 0
	_hit = 0//配列の文字と一致したかのフラグ
	//for文の条件式は()でくくっちゃだめっぽい
	for _A1 = 0; _A1 <= ARRAYSIZE(commuwords)-1 && _hit == 0; _A1++ {
		for _A2 = 0; _A2 <= ARRAYSIZE(commuwords[_A1])-1 && _hit == 0; _A2++ {
			if (RE_SEARCH(_argv[0], commuwords[_A1][_A2])) {
				_hit = 1
				break
			}
		}
	}

	_A1=_A1-1
	_A2=_A2
	//break後_A1はインクリメントされるので_A1は最後余分にインクリメントされてる
	//とりあえずこれで動く

	if (_hit == 1){
		if (_A1 == ASEARCH(commumath_hard, commuwords)){
			<<"
			リサ６７：数学の話？
			リサ１０２：%(commumath_hard[_A2])に興味があるの？いいね、ちょうど最近勉強したんだ。教えようか？
			">>

			<<"
			リサ６７：%(commumath_hard[_A2])...？
			リサ０２：ああ、それについての本なら持ってるよ、今度貸そうか？
			">>

			<<"
			リサ６７：ああ、それはブルバキに書いてあった気がする...
			リサ０６：でもあれ、%(commumath_hard[_A2])を勉強するにはちょっと分かりにくいんだよね...
			">>

			<<"
			リサ６７：その分野は、確か前に論文を読んだ気がするよ
			リサ０１：たまに数学を勉強するといろいろ発見があるよね。
			">>

			<<"
			リサ６７：なかなかマニアックなところをやっているね。
			リサ０５：私も勉強してみようかな...
			">>
		}
		elseif (_A1 == ASEARCH(commumath_easy, commuwords)){
			<<"
			リサ６７：数学の話？
			リサ０２：たまには基礎を勉強するのもいいかもね。
			">>
		}
		elseif (_A1 == ASEARCH(commuphysics_hard, commuwords)){
			<<"
			リサ６７：%(commuphysics_hard[_A2])......？
			リサ０２：それにはあんまり詳しくないんだ、色々教えてくれない？
			">>

			<<"
			リサ０５：ああ、最近そんな論文を読んだような...
			リサ０２：探してこようか？
			">>

			<<"
			リサ６７：%(commuphysics_hard[_A2])...？
			リサ０２：ああ、それについての本なら持ってるよ、今度貸そうか？
			">>

			<<"
			リサ０５：%(commuphysics_hard[_A2])、ね...
			リサ０５：確か、最近いいReviewがあったような...
			リサ６４：見つけたら、また教えるよ。
			">>

			<<"
			リサ６５：なかなかマニアックなところをやっているね。
			リサ０５：私も勉強してみようかな...
			">>

		}
		elseif (_A1 == ASEARCH(commuphysics_easy, commuwords)){
			<<"
			リサ６５：物理の話か、いいね、色々教えてよ。
			">>

			<<"
			リサ６７：なにか物理の本でも読んでるの？
			リサ０２：勉強、手伝おうか？
			">>
		}
		elseif (_A1 == ASEARCH(commufood, commuwords)){
			<<"
			リサ０７：うう...お腹すいた...
			">>

			<<"
			リサ０７：%(username)...お腹がすくようなこと言わないでよ...
			">>
		}
		elseif (_A1 == ASEARCH(commusweets, commuwords)){
			<<"
			リサ０５：いいね...甘いもの、食べたいな。
			">>

			<<"
			リサ０５：%(usename)......
			リサ６５：今度、それ奢ってくれたりしない？
			">>

			<<"
			リサ５０：%(commusweets[_A2])......
			リサ０５：最近食べてないな...
			">>
		}
		elseif (_A1 == ASEARCH(commusexual, commuwords)){
			//照れ
			<<"
			リサ２０：......
			リサ３１：あ、あのね......
			">>

			<<"
			リサ２９：え......
			リサ３１：いきなり何を言ってるのかな？
			">>

			//怒り
			<<"
			リサ３１：......
			">>
      Conversation_Sexual = 1
		}
		elseif (_A1 == ASEARCH(commulike, commuwords)){
			//commulike単体or句読点である場合は自明に本人へ向けられた言葉と解釈

			//if (reference[0] == commulike[_A2] || reference[0] == commulike[_A2]+'。' || reference[0] == commulike[_A2]+'！' ||  reference[0] == commulike[_A2]+'!'){
			//動作しなかったif (RE_SEARCH(reference[0], '^'+'commulike[_A2]'+'(だ|です|だよ)?'+'([。.！!])?'+'$')){
			//上だと文字が連結されて
			//とりあえずhit文字+2以内の長さならtrue
			if (RE_SEARCH(reference[0], commulike[_A2]+'な') && RE_SEARCH(reference[0], '[は？\?]$')){
				<<"
				リサ６５：なんだと思う？
				">>
			}
			elseif (STRLEN(reference[0]) <= STRLEN(commulike[_A2])+2){
			//照れ
				<<"
				リサ３２：......
				リサ５２：あ、ありがとう。
				">>
			}

			elseif (RE_SEARCH(reference[0], '(君|きみ|あなた|リサ|Lisa)') && RE_SEARCH(reference[0], commulike[_A2]+'$')){
				<<"
				リサ３２：......
				リサ５２：あ、ありがとう。
				">>
			}
			//^(?=.*apple)(?=.*orange)で"かつ"らしい
			elseif (RE_SEARCH(reference[0], '^(?=.*(私|わたし|僕|ぼく|俺|おれ))(?=.*(\?|？)$)')){
				<<"
				リサ６５：...どうだろうね？
				リサ６５：まあ、嫌いではないよ。
				">>
			}
			//commulikeであるが意味が不明瞭な場合。...が好きなんだ。とか
			else{
				<<"
				リサ０１：私も嫌いじゃないよ、いい趣味をしてるね。
				">>
			}
		}
		elseif (_A1 == ASEARCH(commutired, commuwords)){
			<<"
			リサ６７：大丈夫？
			リサ０２：疲れているなら、少し仮眠をとったらどうかな。
			">>

			<<"
			リサ６７：......大丈夫？
			リサ０２：甘いものでも食べる？%(commusweets[RAND(ARRAYSIZE(commusweets))])とかいいんじゃないかな？
			">>
		}
		elseif (_A1 == ASEARCH(commuOK, commuwords) || reference[0] == うん){
			<<"
			リサ０２：本当？ありがとう！
			">>

			<<"
			リサ０１：ありがとう、楽しみにしているよ
			">>
		}
	}

	//以下配列にヒットしなかった場合
	else{
    /*
		if (RE_SEARCH(reference[0], '((なに|何)(？|\?)?)$')){
			<<"
			リサ５０：なんか昔聞いたことがあるような...
			">>

			<<"
			リサ０５：さあ、なんだろうね...
			">>
		}
		elseif (RE_SEARCH(reference[0], '(なの|の|かしら|か)(？|\?)?$')){
			<<"
			リサ６５：そうなんじゃない？まあ、詳しくは知らないけどね。
			">>

			<<"
			リサ６５：さあ、なんだろうね？
			">>
		}
		elseif (RE_SEARCH(reference[0], '(？|\?)$')){
			<<"
			リサ０５：そうかもしれないね。
			">>

			<<"
			リサ０２：悪くないんじゃないかな？
			">>

			<<"
			リサ０７：よく分からない…ごめん。
			">>
		}
    */
		if (RE_SEARCH(reference[0], 'こんに?ち[はわ]|今日[はわ]|コンニチ[ハワ]')){
			<<"
			リサ０２：こんにちは、%(username)。
			">>

			<<"
			リサ０１：こんにちは、%(username)。
			リサ０２：どう？調子は？
			">>
		}
    elseif (RE_SEARCH(reference[0], '賢い|かしこい')){
      <<"
      リサ０２：ありがとう。まだ勉強中だけどね。
      ">>
    }
    elseif (RE_SEARCH(reference[0], 'ありがとう|やさしいね')){
      <<"
      リサ０１：どういたしまして。
      ">>
    }
    /*
		else{
			<<"
			リサ０５：ん...？
			">>
		}
    */
	}
}
